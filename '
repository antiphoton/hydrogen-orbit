#include<stdio.h>
#include<mpi.h>
#include<algorithm>
#include<iostream>
#include<vector>
#include"mymath.h"
#include"render.h"
#include"monte_carlo.h"
#include"wave.h"
using std::make_pair;
using std::pair;
using std::vector;
vector < pair<RadialWave *,SphericalHarmonic *> > wf;
vector <Complex> k;
RadialWave *currentRadial;
SphericalHarmonic *currentSpherical;
Complex f0(double rho,double theta,double phi) {
	return currentSpherical->calc(theta,phi)*currentRadial->calc(rho);
}
void createWaveFunction() {
	int n,l,m;
	for (n=1;n<=3;n++) {
		for (l=0;l<n;l++) {
			for (m=-l;m<=l;m++) {
				wf.push_back(make_pair(new RadialWave(n,l),new SphericalHarmonic(l,m)));
			}
		}
	}
}
void decompose() {
	int i;
	for (i=0;i<(int)wf.size();i++) {
		currentRadial=wf[i].first;
		currentSpherical=wf[i].second;
	}
}

int main(int argc, char **argv) {
	createWaveFunction();
	decompose();
	return 0;
};

